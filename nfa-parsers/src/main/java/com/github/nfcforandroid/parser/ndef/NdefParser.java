package com.github.nfcforandroid.parser.ndef;import static com.github.nfcforandroid.parser.factory.NfaParserFactory.*;import android.nfc.NdefRecord;import com.github.nfcforandroid.api.INfaIntentFilter;import com.github.nfcforandroid.api.INfaParser;import com.github.nfcforandroid.api.INfaRecord;import com.github.nfcforandroid.filters.ndef.ext.ExternalNdefFilter;import com.github.nfcforandroid.filters.ndef.ext.TextExternalNdefFilter;import com.github.nfcforandroid.filters.ndef.ext.UriExternalNdefFilter;import com.github.nfcforandroid.parser.base.NfaParserAdapter;import com.github.nfcforandroid.parser.exceptions.UnknowExtTypeException;import com.github.nfcforandroid.parser.factory.NfaParserFactory;import com.github.nfcforandroid.records.factory.NfaRecordFactory;import com.github.nfcforandroid.records.ndef.ext.AndroidApplicationRecord;/** * @author jefBinomed *  *         {@link INfaParser} for ndef data. *  *         The return value is a {@link com.github.nfcforandroid.records.ndef.NdefRecord} *  *         a {@link UnknowExtTypeException} could be thrown if the type is not resolves *  */public class NdefParser extends NfaParserAdapter {	private INfaIntentFilter[] filters;	protected NdefParser(INfaIntentFilter... filters) {		this.filters = filters;	}	/*	 * (non-Javadoc)	 * 	 * @see com.github.nfcforandroid.parser.base.NfaParserAdapter#parseNdef(android.nfc.NdefRecord)	 */	@Override	public INfaRecord parseNdef(NdefRecord ndefRecord) {		short tnf = ndefRecord.getTnf();		INfaRecord record = null;		switch (tnf) {		case NdefRecord.TNF_EMPTY: {			record = NfaRecordFactory.EMPTY_RECORD;			break;		}		case NdefRecord.TNF_WELL_KNOWN: {			record = parseWellKnown(ndefRecord);			break;		}		case NdefRecord.TNF_MIME_MEDIA: {			record = NfaParserFactory.MIME_TYPE_PARSER.parseNdef(ndefRecord);			break;		}		case NdefRecord.TNF_ABSOLUTE_URI: {			// record = AbsoluteUriRecord.parse(ndefRecord);			break;		}		case NdefRecord.TNF_EXTERNAL_TYPE: {			record = parseExt(ndefRecord);			break;		}		case NdefRecord.TNF_UNKNOWN: {			record = NfaParserFactory.UNKNOWN_PARSER.parseNdef(ndefRecord);			break;		}		/*		 * case NdefRecord.TNF_UNCHANGED: { throw new IllegalArgumentException("Chunked records no supported"); // chunks are abstracted away by android so should never happen }		 */		}		if (record == null) { // pass through			record = NfaParserFactory.UNSUPPORTED_PARSER.parseNdef(ndefRecord);		}		if (ndefRecord.getId().length > 0) {			// record.setId(ndefRecord.getId());		}		return record;	}	protected INfaRecord parseExt(NdefRecord ndefRecord) {		INfaRecord record = null;		String path = null;		String type = new String(ndefRecord.getType());		// if (this.filters == null || this.filters.length == 0) {		// throw new UnknowExtTypeException("You don't have passed any filters to identify the current record.");		// }		// TODO check if it is mandatory to identify the filters....		// We try to identify the tags according to given filters		for (INfaIntentFilter filter : filters) {			path = filter.getDataPath();			if (path != null) {				if (path.charAt(0) == '/') {					path = path.substring(1);				}				type = new String(ndefRecord.getType());				if (path.equals(type)) {					if (filter instanceof ExternalNdefFilter) {						record = EXTERNAL_PARSER.parseNdef(ndefRecord);						break;					} else if (filter instanceof TextExternalNdefFilter) {						record = EXTERNAL_TEXT_PARSER.parseNdef(ndefRecord);						break;					} else if (filter instanceof UriExternalNdefFilter) {						record = EXTERNAL_URI_PARSER.parseNdef(ndefRecord);						break;					} else if (AndroidApplicationRecord.TYPE.equals(type)) {						record = ANDROID_APPLICATION_PARSER.parseNdef(ndefRecord);						break;					}				}			}		}		if (record == null) {			// If no record was identify, we could suppose it is an Android ApplicationRecord, else, we parse it to external			if (AndroidApplicationRecord.TYPE.equals(type)) {				record = ANDROID_APPLICATION_PARSER.parseNdef(ndefRecord);			} else {				record = EXTERNAL_PARSER.parseNdef(ndefRecord);			}			// TODO check if it is mandatory to identify the filters....			// type = new String(ndefRecord.getType());			// throw new UnknowExtTypeException("type not found : " + type);		}		return record;	}	protected static INfaRecord parseWellKnown(NdefRecord ndefRecord) {		// lame type search among supported types		byte[] type = ndefRecord.getType();		if (type.length == 1) {			// uri = U			// text = T			// gctarget = t			// gcdata = d			// gcaction a			switch (type[0]) {			case 'U': {				return URI_PARSER.parseNdef(ndefRecord);			}			case 'T': {				return TEXT_PARSER.parseNdef(ndefRecord);			}			case 't': {				return null;// GcTargetRecord.parseNdefRecord(ndefRecord);			}			case 'd': {				return null;// GDataRecord.parseNdefRecord(ndefRecord);			}			case 'a': {				return null;// GcActionRecord.parseNdefRecord(ndefRecord);			}			}		} else if (type.length == 2) {			// smartposter = Sp			// genericcontrol = Gc			// alternativecarrier = ac			// handovercarrier = Hc			// handoverselect = Hs			// handoverrequest = Hr			// collision resolution = cr			switch (type[0]) {			case 'S': {				if (type[1] == 'p') {					return SMART_POSTER_PARSER.parseNdef(ndefRecord);				}				break;			}			case 'G': {				if (type[1] == 'c') {					return null;// GenericControlRecord.parseNdefRecord(ndefRecord);				}				break;			}			case 'a': {				if (type[1] == 'c') {					return null;// AlternativeCarrierRecord.parseNdefRecord(ndefRecord);				}				break;			}			case 'c': {				if (type[1] == 'r') {					return null;// CollisionResolutionRecord.parseNdefRecord(ndefRecord);				}				break;			}			case 'H': {				if (type[1] == 'c') {					return null;// HandoverCarrierRecord.parseNdefRecord(ndefRecord);				} else if (type[1] == 's') {					return null;// HandoverSelectRecord.parseNdefRecord(ndefRecord);				} else if (type[1] == 'r') {					return null;// HandoverRequestRecord.parseNdefRecord(ndefRecord);				}				break;			}			}		} else if (type.length == 3) {			// action = act			// error = err			// signature = Sig			if (type[0] == 'a' && type[1] == 'c' && type[2] == 't') {				return null;// ActionRecord.parseNdefRecord(ndefRecord);			} else if (type[0] == 'e' && type[1] == 'r' && type[2] == 'r') {				return null;// ErrorRecord.parseNdefRecord(ndefRecord);			} else if (type[0] == 'S' && type[1] == 'i' && type[2] == 'g') {				return null;// SignatureRecord.parseNdefRecord(ndefRecord);			}		}		return null;	}}